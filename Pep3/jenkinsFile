pipeline {
    agent any
    tools {
        maven "maven"
    }
    stages {
        stage("Checkout") {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/siposisp/pep1devsecops']]
                )
            }
        }

        stage("Build Backend") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "mvn clean install"
                }
            }
        }

        stage("Test Backend") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "mvn test"
                }
            }
        }
        
        stage("SpotBugs Analysis") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "mvn spotbugs:spotbugs"
                    bat "dir target"
                }
            }
        }
        
        stage("SonarQube Analysis") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "mvn clean verify sonar:sonar  -Dsonar.projectKey=pep2 -Dsonar.projectName='pep2'  -Dsonar.host.url=http://localhost:9000  -Dsonar.token=sqp_1194941fd244a6fd7eb08ddcb13f7a6320d2c6b8"
                }
            }
        }
        
        stage("Build Docker Image backend") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "docker build -t derflinger/pep2devsecops_backend ."
                }
            }
        }
        
        stage("Push Docker Image backend") {
            steps {
                dir("Pep3/LAB-TBD") {
                    withCredentials([string(credentialsId: 'dckrhubpassword', variable: 'dckpass')]) {
                        bat "docker login -u derflinger -p ${dckpass}"
                        bat "docker push derflinger/pep2devsecops_backend"
                    }
                }
            }
        }

        stage("Build Frontend") {
            steps {
                dir("Pep3/Frontend") {
                    bat "npm install"
                    bat "npm run build"
                }
            }
        }

        stage("Build Docker Image Frontend") {
            steps {
                dir("Pep3/Frontend") {
                    bat "docker build -t derflinger/pep2devsecops_frontend ."
                }
            }
        }

        stage("Push Docker Image frontend") {
            steps {
                dir("Pep3/Frontend") {
                    withCredentials([string(credentialsId: 'dckrhubpassword', variable: 'dckpass')]) {
                        bat "docker login -u derflinger -p ${dckpass}"
                        bat "docker push derflinger/pep2devsecops_frontend"
                    }
                }
            }
        }

        stage("Deploy Backend with Docker Compose") {
            steps {
                dir("Pep3/LAB-TBD") {
                    bat "docker-compose down -v || exit 0"
                    bat "docker-compose up -d --build"
                }
            }
        }
        
        stage("Deploy Frontend with Docker Compose") {
            steps {
                dir("Pep3/Frontend") {
                    bat "docker-compose down || exit 0"
                    bat "docker-compose up -d --build"
                }
            }
        }
        
        stage("Publicar HTML SpotBugs") {
            steps {
                publishHTML([
                    reportName: 'SpotBugs HTML Report',
                    reportDir: 'Pep3/LAB-TBD/target/spotbugs-html',
                    reportFiles: 'index.html',
                    keepAll: true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }
        
        stage("Verificar Monitoreo") {
            steps {
                script {
                    // Esperar a que los servicios estén listos
                    sleep(30)
                    
                    // Verificar que Prometheus esté funcionando
                    bat "curl -f http://localhost:9090/-/healthy || echo 'Prometheus no está respondiendo'"
                    
                    // Verificar que Grafana esté funcionando
                    bat "curl -f http://localhost:3001/api/health || echo 'Grafana no está respondiendo'"
                    
                    // Verificar que la aplicación esté exponiendo métricas
                    bat "curl -f http://localhost:8097/actuator/prometheus || echo 'Métricas de la aplicación no disponibles'"
                }
            }
        }
    }

    post {
        always {
            bat "docker logout"
            recordIssues tools: [spotBugs(pattern: 'Pep3/**/spotbugsXml.xml')]
            
            // Limpiar contenedores si el build falla
            script {
                if (currentBuild.result == 'FAILURE') {
                    dir("Pep3/LAB-TBD") {
                        bat "docker-compose down -v || exit 0"
                    }
                    dir("Pep3/Frontend") {
                        bat "docker-compose down || exit 0"
                    }
                }
            }
        }
        success {
            echo "Pipeline completado exitosamente. Servicios disponibles:"
            echo "- Backend: http://localhost:8097"
            echo "- Frontend: http://localhost:3000"
            echo "- Prometheus: http://localhost:9090"
            echo "- Grafana: http://localhost:3001 (admin/admin)"
            echo "- Node Exporter: http://localhost:9100"
            echo "- Postgres Exporter: http://localhost:9187"
        }
    }
}
