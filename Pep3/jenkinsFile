pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'derflinger'
        FRONTEND_IMAGE = 'pep3_frontend'
        BACKEND_IMAGE = 'pep3_backend'
        FRONTEND_TAG = 'latest'
        BACKEND_TAG = 'latest'
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        PROJECT_PATH = 'Pep3'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo '‚úÖ C√≥digo descargado exitosamente'
                sh 'ls -la'
                sh 'ls -la Pep3/'
            }
        }
        
        stage('Build Frontend') {
            when {
                anyOf {
                    changeset "Pep3/Frontend/**"
                    changeset "Pep3/**/package.json"
                    changeset "Pep3/**/vite.config.js"
                }
            }
            steps {
                dir('Pep3/Frontend') {
                    script {
                        echo 'üî® Construyendo Frontend...'
                        sh 'npm ci'
                        sh 'npm run build'
                        echo '‚úÖ Frontend construido exitosamente'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'Pep3/Frontend/dist/**/*', fingerprint: true
                }
            }
        }
        
        stage('Build Backend') {
            when {
                anyOf {
                    changeset "Pep3/LAB-TBD/**"
                    changeset "Pep3/**/pom.xml"
                }
            }
            steps {
                dir('Pep3/LAB-TBD') {
                    script {
                        echo 'üî® Construyendo Backend...'
                        sh 'mvn clean compile'
                        echo '‚úÖ Backend compilado exitosamente'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'Pep3/LAB-TBD/target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Test Backend') {
            when {
                anyOf {
                    changeset "Pep3/LAB-TBD/**"
                    changeset "Pep3/**/pom.xml"
                }
            }
            steps {
                dir('Pep3/LAB-TBD') {
                    script {
                        echo 'üß™ Ejecutando tests del Backend...'
                        try {
                            sh 'mvn test'
                            echo '‚úÖ Tests del Backend completados exitosamente'
                        } catch (Exception e) {
                            echo '‚ö†Ô∏è Algunos tests fallaron, pero continuando con el pipeline...'
                            echo 'Error: ' + e.getMessage()
                        }
                    }
                }
            }
            post {
                always {
                    junit 'Pep3/LAB-TBD/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            echo 'üîç Ejecutando an√°lisis de SonarQube...'
                            try {
                                withSonarQubeEnv('SonarQube') {
                                    dir('Pep3/LAB-TBD') {
                                        sh 'mvn sonar:sonar -Dsonar.projectKey=pep3-backend -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${SONAR_TOKEN}'
                                    }
                                }
                            } catch (Exception e) {
                                echo '‚ö†Ô∏è An√°lisis de SonarQube fall√≥, pero continuando...'
                            }
                        }
                    }
                }
                
                stage('Dependency Check') {
                    steps {
                        script {
                            echo 'üîç Verificando dependencias vulnerables...'
                            try {
                                dir('Pep3/LAB-TBD') {
                                    sh 'mvn org.owasp:dependency-check-maven:check'
                                }
                            } catch (Exception e) {
                                echo '‚ö†Ô∏è Dependency Check fall√≥, pero continuando...'
                            }
                        }
                    }
                }
                
                stage('SpotBugs Analysis') {
                    steps {
                        script {
                            echo 'üîç Ejecutando an√°lisis de SpotBugs...'
                            try {
                                dir('Pep3/LAB-TBD') {
                                    sh 'mvn spotbugs:spotbugs'
                                }
                            } catch (Exception e) {
                                echo '‚ö†Ô∏è SpotBugs fall√≥, pero continuando...'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    echo 'üê≥ Construyendo im√°genes Docker...'
                    
                    // Build Frontend Image
                    dir('Pep3/Frontend') {
                        sh """
                            docker build -t ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${FRONTEND_TAG} .
                            docker tag ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${FRONTEND_TAG} ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${BUILD_NUMBER}
                        """
                    }
                    
                    // Build Backend Image
                    dir('Pep3/LAB-TBD') {
                        sh """
                            docker build -t ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${BACKEND_TAG} .
                            docker tag ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${BACKEND_TAG} ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${BUILD_NUMBER}
                        """
                    }
                    
                    echo '‚úÖ Im√°genes Docker construidas exitosamente'
                }
            }
        }
        
        stage('Push Docker Images') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'üì§ Subiendo im√°genes a Docker Hub...'
                    
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        
                        sh """
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${FRONTEND_TAG}
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${BUILD_NUMBER}
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${BACKEND_TAG}
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${BUILD_NUMBER}
                        """
                    }
                    
                    echo '‚úÖ Im√°genes subidas exitosamente'
                }
            }
        }
        
        stage('Deploy to Development') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    echo 'üöÄ Desplegando en entorno de desarrollo...'
                    
                    dir('Pep3') {
                        // Stop existing containers
                        sh 'docker-compose down || true'
                        
                        // Pull latest images
                        sh 'docker-compose pull'
                        
                        // Start services
                        sh 'docker-compose up -d'
                        
                        // Wait for services to be healthy
                        sh '''
                            timeout 300 bash -c 'until curl -f http://localhost:8097/actuator/health; do sleep 5; done'
                            timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
                        '''
                    }
                    
                    echo '‚úÖ Despliegue en desarrollo completado'
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'üöÄ Desplegando en producci√≥n...'
                    
                    dir('Pep3') {
                        // Blue-Green deployment strategy
                        def currentColor = sh(script: 'docker ps --filter "name=pep3" --format "{{.Names}}" | grep -o "blue\|green" | head -1', returnStdout: true).trim()
                        def newColor = currentColor == 'blue' ? 'green' : 'blue'
                        
                        sh """
                            # Deploy new version
                            docker-compose -f docker-compose.yml -f docker-compose.${newColor}.yml up -d
                            
                            # Health check
                            timeout 300 bash -c 'until curl -f http://localhost:8097/actuator/health; do sleep 5; done'
                            timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
                            
                            # Switch traffic
                            docker-compose -f docker-compose.yml -f docker-compose.${newColor}.yml up -d nginx
                            
                            # Stop old version
                            docker-compose -f docker-compose.yml -f docker-compose.${currentColor}.yml down
                        """
                    }
                    
                    echo '‚úÖ Despliegue en producci√≥n completado'
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                script {
                    echo 'üß™ Ejecutando tests de integraci√≥n...'
                    
                    // Wait for services to be ready
                    sh 'sleep 30'
                    
                    // Run integration tests
                    dir('Pep3/LAB-TBD') {
                        try {
                            sh 'mvn test -Dtest=*IntegrationTest'
                        } catch (Exception e) {
                            echo '‚ö†Ô∏è Tests de integraci√≥n fallaron, pero continuando...'
                        }
                    }
                    
                    echo '‚úÖ Tests de integraci√≥n completados'
                }
            }
            post {
                always {
                    junit 'Pep3/LAB-TBD/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Performance Tests') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo '‚ö° Ejecutando tests de rendimiento...'
                    
                    // Run performance tests with JMeter or similar
                    try {
                        sh '''
                            # Example with Apache Bench
                            ab -n 1000 -c 10 http://localhost:3000/
                            ab -n 1000 -c 10 http://localhost:8097/actuator/health
                        '''
                    } catch (Exception e) {
                        echo '‚ö†Ô∏è Tests de rendimiento fallaron, pero continuando...'
                    }
                    
                    echo '‚úÖ Tests de rendimiento completados'
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Limpiando workspace...'
            cleanWs()
        }
        
        success {
            echo 'üéâ Pipeline ejecutado exitosamente!'
            emailext (
                subject: "Pipeline PEP3 #${BUILD_NUMBER} - SUCCESS",
                body: "El pipeline se ejecut√≥ exitosamente. Build: ${BUILD_URL}",
                to: "${env.BUILD_USER_EMAIL}"
            )
        }
        
        failure {
            echo '‚ùå Pipeline fall√≥!'
            emailext (
                subject: "Pipeline PEP3 #${BUILD_NUMBER} - FAILURE",
                body: "El pipeline fall√≥. Build: ${BUILD_URL}",
                to: "${env.BUILD_USER_EMAIL}"
            )
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline inestable!'
        }
    }
}
